/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Vigilant.pathfinder;
import Vigilant.pathfinder.Datastructures.*;
import Vigilant.pathfinder.pathfinding.*;
import java.util.Scanner; //oletettavasti sallittu
public class App {
    public String getGreeting() {
        return "Hello world!";
    }

    public static void main(String[] args) {      
        Scanner sc = new Scanner(System.in);
        Speedtest st = new Speedtest();
        System.out.println("Tervetuloa generoimaan");
        System.out.println("En ole pitkään aikaan kirjoittanut tällaista looppia, joten olkaa armollisia");
        System.out.println("Ohjelma kaatuu väärillä syötteillä, pahoitteluni");
        while (true) {
            System.out.println("Mitä haluat tehdä?");
            System.out.println("Valitse vaihtoehto antamalla sitä vastaava numero (1-4)");
            System.out.println("Vaihtoehdot: nopeusvertailu, labyrintin generointi ja katselu, labyrintin generointi ja polunetsintä, lopetus");
            String s = sc.nextLine();
            if (s.equals("4")) {
                break;
            }
            System.out.println("Anna sivun pituus labyrintille (suositus alle 500 testaamisessa)"); 
            String s2=sc.nextLine();                      
            int i = Integer.parseInt(s2);
            if (s.equals("1")) {               
                System.out.println("Kuinka monta kertaa haluat testata? Tulos annetaan keskiarvona.");
                s2=sc.nextLine();
                int p = Integer.parseInt(s2);
                System.out.println("Odota, testeja suoritetaan......");
                st.test(i, p);
            } else if (s.equals("2")) {
                System.out.println("Odota, labyrintti tulostuu.....");
                Primlab prim=new Primlab(i);
                prim.createMaze();
                prim.testFt();
            } else if (s.equals("3")) {
                Primlab prim=new Primlab(i);
                prim.createMaze();
                int maze[][]=prim.getMaze();
                System.out.println("Mikä algoritmi? (1:dfs, 2:bfs, 3:a*)");
                String s3=sc.nextLine();
                if (s3.equals("1")) {
                    DFS dfs = new DFS(maze);
                    System.out.println("DFS löysi polun "+dfs.search()+" siirtymisessä");
                } else if (s3.equals("2")) {
                    BFS bfs = new BFS(maze);
                    System.out.println("BFS löysi polun "+bfs.search()+" siirtymisessä");
                } else if (s3.equals("3")) {
                    Astar a=new Astar(maze);
                    System.out.println("A* löysi polun "+a.search()+" siirtymisessä");
                }
            }
            System.out.println("-----------------------");
        }    
        
    }
}
