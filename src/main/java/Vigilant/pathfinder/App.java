/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Vigilant.pathfinder;
import Vigilant.pathfinder.Datastructures.*;
import Vigilant.pathfinder.pathfinding.*;
public class App {
    public String getGreeting() {
        return "Hello world!";
    }

    public static void main(String[] args) {
        /*
        Primlab prim = new Primlab(150);
        long t = System.currentTimeMillis();
        System.out.println("Time at start: "+t);
        prim.createMaze(); //luo labyrintin
        long t1=System.currentTimeMillis();
        System.out.println("Maze generation: "+(t1-t));
        //prim.testFt();
        int maze[][]=prim.getMaze();
        long t2=System.currentTimeMillis();
        System.out.println("Time getMaze() took: "+ (t2-t1));
        BFS bfs = new BFS(maze);
        System.out.println(bfs.search());
        long t3=System.currentTimeMillis();
        System.out.println("Time spent for BFS: "+(t3-t2));
        DFS dfs = new DFS(maze);
        System.out.println(dfs.search());
        long t4=System.currentTimeMillis();
        System.out.println("Time spent for DFS: "+(t4-t3));
        Astar astar= new Astar(maze);
        System.out.println(astar.search());
        long t5=System.currentTimeMillis();
        System.out.println("Time spent for Astar: "+(t5-t4));
        */
        Random r = new Random();
        int arr[]=new int[2000];
        for (int i=0;i<999999;i++) {
            int w = r.getRand(2000);
            arr[w]++;
        }
        for (int j=1900;j<2000;j++) {
            System.out.println(arr[j]);
        }
        
        
         //returnaa labyrintin matriisina
        //DFS dfs = new DFS(maze);
        //System.out.println(dfs.search()); //etsii polun
        //dfs.testFt();     
    }
}
