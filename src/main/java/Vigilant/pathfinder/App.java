/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Vigilant.pathfinder;
import Vigilant.pathfinder.Datastructures.*;
import Vigilant.pathfinder.pathfinding.*;
public class App {
    public String getGreeting() {
        return "Hello world!";
    }

    public static void main(String[] args) {
        int maze[][]= new int[10][10];
        int size = 9;
        for (int i=0;i<size;i++){
            for (int j=0;j<size;j++) {
                if (i%2==0) {
                    if (j%2==0) {
                        maze[i][j]=1;
                    }
                } else {
                    if (j%2!=0) {
                        maze[i][j]=9;
                    }
                }
            }
        }
        maze[1][0]=2;
        maze[2][1]=2;
        maze[2][3]=2;
        maze[3][0]=2;
        maze[3][4]=2;
        maze[3][8]=2;
        maze[4][7]=2;
        maze[5][0]=2;
        maze[5][6]=2;
        maze[5][8]=2;
        maze[6][1]=2;
        maze[6][3]=2;
        maze[6][5]=2;
        maze[7][6]=2;
        maze[7][8]=2;
        BFS b = new BFS(maze);
        DFS d = new DFS(maze);
        System.out.println(d.search());
        System.out.println(b.search());
        /*
        Primlab prim = new Primlab(9);
        prim.createMaze(); //luo labyrintin
        prim.testFt();
        int maze[][]=prim.getMaze();
        BFS bfs = new BFS(maze);
        System.out.println(bfs.search());
        DFS dfs = new DFS(maze);
        System.out.println(dfs.search());
*/
         //returnaa labyrintin matriisina
        //DFS dfs = new DFS(maze);
        //System.out.println(dfs.search()); //etsii polun
        //dfs.testFt(); //tulostaa labyrintin, voisi hyvin käyttää samaa funktiota primillä.      
    }
}
